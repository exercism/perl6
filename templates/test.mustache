#!/usr/bin/env perl6
use v6;{{=#`{{ }}=}}#`{{! Mustache tags double up as Perl 6 embedded comments}}
use Test;
use lib #`{{#cdata}}my $dir = #`{{/cdata}}$?FILE.IO.dirname;#`{{#lib_comment}} #`[#`{{&lib_comment}}]#`{{/lib_comment}}
#`{{#cdata}}use JSON::Tiny;
#`{{/cdata}}#`{{#modules}}use #`{{&use}};
#`{{/modules}}

my $exercise#`{{#exercise}} = '#`{{&exercise}}'#`{{/exercise}};#`{{#exercise_comment}} #`[#`{{&exercise_comment}}]#`{{/exercise_comment}}
my $version#`{{#version}} = v#`{{&version}}#`{{/version}};#`{{#version_comment}} #`[#`{{&version_comment}}]#`{{/version_comment}}
my $module = %*ENV<EXERCISM> ?? 'Example' !! $exercise;#`{{#module_comment}} #`[#`{{&module_comment}}]#`{{/module_comment}}#`{{#plan}}
plan #`{{&plan}};#`{{#plan_comment}} #`[#`{{&plan_comment}}]#`{{/plan_comment}}#`{{/plan}}
#`{{#use_test_comment}}

#`[#`{{&use_test_comment}}]#`{{/use_test_comment}}
use-ok $module or bail-out;
require ::($module);
#`{{#version_test_comment}}

#`[#`{{&version_test_comment}}]#`{{/version_test_comment}}
if ::($exercise).^ver !~~ $version {
  warn "\nExercise version mismatch. Further tests may fail!"
    ~ "\n$exercise is $(::($exercise).^ver.gist). "
    ~ "Test is $($version.gist).\n";
  bail-out 'Example version must match test version.' if %*ENV<EXERCISM>;
}
#`{{#imports}}#`{{#imports_comment}}
#`[#`{{&imports_comment}}]#`{{/imports_comment}}
require ::($module) <#`{{&imports}}>;
#`{{/imports}}#`{{#methods}}#`{{#methods_comment}}
#`[#`{{&methods_comment}}]#`{{/methods_comment}}
subtest 'Class methods', {
  ok ::($exercise).can($_), $_ for <#`{{&methods}}>;
}
#`{{/methods}}#`{{#cdata}}
my $c-data;#`{{/cdata}}
#`{{&tests}}
#`{{#cdata}}#`{{#cdata_test_comment}}
#`[#`{{&cdata_test_comment}}]#`{{/cdata_test_comment}}
if %*ENV<EXERCISM> && (my $c-data-file =
  "$dir/../../problem-specifications/exercises/{$dir.IO.resolve.basename}/canonical-data.json".IO.resolve) ~~ :f
{ is-deeply $c-data, from-json($c-data-file.slurp), 'canonical-data' } else { skip }
#`{{/cdata}}

done-testing;#`{{#done_testing_comment}} #`[#`{{&done_testing_comment}}]#`{{/done_testing_comment}}#`{{#after_done_testing}}

#`{{&after_done_testing}}#`{{/after_done_testing}}#`{{#cdata}}
#`{{#INIT_comment}}

#`[#`{{&INIT_comment}}]#`{{/INIT_comment}}
INIT {
$c-data := from-json q:to/END/;

#`{{&json}}
END
}#`{{/cdata}}
