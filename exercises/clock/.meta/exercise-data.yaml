exercise: Clock
methods: time add-minutes subtract-minutes
plan: 55
tests: |-
  for $c-data<cases>»<cases>»<>.flat -> %case {
    given %case<property> {

      when 'create' {
        is Clock.new( |%(.<input><hour minute>:p) ).time,
          |.<expected description> given %case;
      }

      when <add subtract>.any {
        given %case {
          my $clock = Clock.new: |%(.<input><hour minute>:p);
          $clock.add-minutes: .<input><value>
            if .<property> eq 'add';
          $clock.subtract-minutes: .<input><value>
            if .<property> eq 'subtract';
          is $clock.time, |.<expected description>;
        }
      }

      when 'equal' {
        is-deeply ([eq] gather {
          take Clock.new( |%(.<hour minute>:p) ).time
            for %case<input><clock1 clock2>;
        }), |%case<expected description>;
      }

    }
  }

  is Clock.new(:0hour,:0minute).add-minutes(65).?time,
    '01:05', 'add-minutes method can be chained';

  is Clock.new(:0hour,:0minute).subtract-minutes(65).?time,
    '22:55', 'subtract-minutes method can be chained';

catch_stub: true

unit: class
example: |-
  has Int:D $.hour = 0;
  has Int:D $.minute = 0;

  method time {
    sprintf '%02d:%02d', ($!hour + $!minute div 60) % 24, $!minute % 60;
  }

  method add-minutes (Int:D $min) {
    $!minute += $min and return self;
  }

  method subtract-minutes (Int:D $min) {
    self.add-minutes(-$min);
  }
stub: |-
  has $.hour;
  has $.minute;

  method time {!!!}

  method add-minutes ($amount) {!!!}

  method subtract-minutes ($amount) {!!!}
