plan: 5
tests: |-
  for @test-cases -> %case {
    given %case<expected> {
      when .<error>.so {
        throws-like
          { nucleotide-count %case<input><strand> },
          Exception,
          message => /
            $( %case<expected><error> )
            || 'Constraint type check failed in binding to parameter'
          /,
          %case<description>;
      }

      default {
        cmp-ok nucleotide-count(%case<input><strand>),
          '~~', %case<expected>.Bag, %case<description>;
      }
    }
  }

example: |-
  my role X::NucleotideCount is Exception {}

  my class X::NucleotideCount::InvalidNucleotide does X::NucleotideCount {
    method message {
      'Invalid nucleotide in strand';
    }
  }

  module NucleotideCount {
    multi nucleotide-count (
      Str:D $_ where { .comb.Set âŠ† <A C G T> },
      --> Bag(Iterable:D)
    ) is export {
      .comb;
    }

    multi nucleotide-count (
      Str:D $_,
      --> Nil
    ) {
      X::NucleotideCount::InvalidNucleotide.new.throw;
    }
  }

stub: |-
  unit module NucleotideCount;

  sub nucleotide-count ($strand) is export {
  }
