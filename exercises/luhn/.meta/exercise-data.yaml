exercise: Luhn
plan: 16
tests: |-
  for $c-data<cases>.values {
    given is-luhn-valid .<input><value> -> $result {
      subtest .<description>, {
        plan 2;
        isa-ok $result, Bool;
        is-deeply $result, .<expected>, 'Result matches expected';
      }
    }
  }

unit: module
example: |-
  sub is-luhn-valid ($input is copy) is export {
    $input ~~ s:g/\s+//;
    return False if $input.chars < 2 || $input ~~ /\D/;
    my @num = $input.split('', :skip-empty);
    @num.unshift: 0 if @num % 2;
    my $sum;
    for @num -> $a, $b {
      $sum += $a * 2;
      $sum -= 9 if $a * 2 > 9;
      $sum += $b;
    }
    return ($sum %% 10).so;
  }
stub: |-
  sub is-luhn-valid ($input) is export {
  }
