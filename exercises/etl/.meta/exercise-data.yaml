exercise: ETL
plan: 4
tests: |-
  =head2 Notes
  =begin para
  The test expects your returned C<Hash> to have
  L<type constraints|https://docs.raku.org/type/Hash#Constraint_value_types>.
  Defined C<Str>s for the values, and defined C<Int>s for the keys.
  =end para
  for $c-data<cases>.values -> %case-set {
    is-deeply(
      transform(Hash[Array[Str:D], Int:D].new(
        .<input>.pairs».&{
          .key.Int => Array[Str:D](.value.Slip)
        }
      )),
      Hash[Int:D, Str:D].new(.<expected>.pairs),
      .<description>
    ) for %case-set<cases>.values;
  }

unit: module
example: |-
  sub transform ( Hash[Array[Str:D], Int:D] $_ --> Hash[Int:D, Str:D] ) is export {
    Hash[Int:D, Str:D].new: .invert».&{ .key.lc => .value }
  }
stub: |-
  sub transform (%input) is export {
  }
