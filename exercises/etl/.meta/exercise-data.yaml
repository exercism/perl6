package: ETL
plan: 4
tests: |-
  =head2 Notes
  =begin para
  The test expects your returned C<Hash> to have
  L<type constraints|https://docs.raku.org/type/Hash#Constraint_value_types>.
  Defined C<Str>s for the values, and defined C<Int>s for the keys.
  =end para

  for $c-data<cases>»<cases>»<>.flat -> %case {
    my Array[Str:D] %input{Int:D} =
      %case<input><legacy>.pairs.map: {
        .key.Int => Array[Str:D].new( |.value )
      };

    is-deeply
      transform(%input),
      Hash[ Int:D, Str:D ].new( %case<expected>.pairs ),
      %case<description>;
  }

unit: module
example: |-
  sub transform (
    Array[Str:D] %input where { .keys.all ~~ Int:D },
    --> Hash[ Int:D, Str:D ]
  ) is export {
    Hash[ Int:D, Str:D ].new( %input.invert.map: { .key.lc => .value } );
  }
stub: |-
  sub transform (%input) is export {
  }
