#!/usr/bin/env perl6
use v6;
use Test;
use JSON::Fast;
use lib $?FILE.IO.dirname;
use ETL;
plan 4;

my $c-data = from-json $=pod.pop.contents;
=head2 Notes
=begin para
The test expects your returned C<Hash> to have
L<type constraints|https://docs.raku.org/type/Hash#Constraint_value_types>.
Defined C<Str>s for the values, and defined C<Int>s for the keys.
=end para

for $c-data<cases>»<cases>»<>.flat -> %case {
  my Array[Str:D] %input{Int:D} =
    %case<input><legacy>.pairs.map: {
      .key.Int => Array[Str:D].new( |.value )
    };

  is-deeply
    transform(%input),
    Hash[ Int:D, Str:D ].new( %case<expected>.pairs ),
    %case<description>;
}

=head2 Canonical Data
=begin code
{
  "exercise": "etl",
  "version": "2.0.1",
  "cases": [
    {
      "comments": [
        "Transforms a set of legacy Scrabble data stored as letters per score",
        "to a set of data stored score per letter.",
        "Note:  The expected input data for these tests should have",
        "integer keys (not stringified numbers as shown in the JSON below",
        "Unless the language prohibits that, please implement these tests",
        "such that keys are integers. e.g. in JavaScript, it might look ",
        "like `transform( { 1: ['A'] } );`"
      ],
      "description": "Transform legacy to new",
      "cases": [
        {
          "description": "single letter",
          "property": "transform",
          "input": {
            "legacy": {
              "1": ["A"]
            }
          },
          "expected": {
            "a": 1
          }
        },
        {
          "description": "single score with multiple letters",
          "property": "transform",
          "input": {
            "legacy": {
              "1": ["A", "E", "I", "O", "U"]
            }
          },
          "expected": {
            "a": 1,
            "e": 1,
            "i": 1,
            "o": 1,
            "u": 1
          }
        },
        {
          "description": "multiple scores with multiple letters",
          "property": "transform",
          "input": {
            "legacy": {
              "1": ["A", "E"],
              "2": ["D", "G"]
            }
          },
          "expected": {
            "a": 1,
            "d": 2,
            "e": 1,
            "g": 2
          }
        },
        {
          "description": "multiple scores with differing numbers of letters",
          "property": "transform",
          "input": {
            "legacy": {
               "1": ["A", "E", "I", "O", "U", "L", "N", "R", "S", "T"],
               "2": ["D", "G"],
               "3": ["B", "C", "M", "P"],
               "4": ["F", "H", "V", "W", "Y"],
               "5": ["K"],
               "8": ["J", "X"],
              "10": ["Q", "Z"]
            }
          },
          "expected": {
            "a":  1, "b":  3, "c": 3, "d": 2, "e": 1,
            "f":  4, "g":  2, "h": 4, "i": 1, "j": 8,
            "k":  5, "l":  1, "m": 3, "n": 1, "o": 1,
            "p":  3, "q": 10, "r": 1, "s": 1, "t": 1,
            "u":  1, "v":  4, "w": 4, "x": 8, "y": 4,
            "z": 10
          }
        }
      ]
    }
  ]
}
=end code
