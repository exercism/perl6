exercise: AllYourBase
plan: 21
tests: |-
  for $c-data<cases>.values -> %case {
    my &call-convert-base := -> {
      convert-base(
        bases  => %(<from to> Z=> %case<input><inputBase outputBase>),
        digits => %case<input><digits>,
      );
    };

    given %case<expected> {
      when .<error>.so {
        throws-like
          {call-convert-base},
          Exception,
          message => /
            $( %case<expected><error> )
            || 'Constraint type check failed in binding to parameter'
          /,
          %case<description>;
      }

      default {
        cmp-ok call-convert-base, ‘~~’, |%case<expected description>;
      }
    }
  }

unit: module
example: |-
  sub convert-base (
    :%bases!  where { all(.keys ~~ <from to>.Set, .values.all > 1) },
    :@digits! where { %bases<from> > .all ~~ UInt:D },
    --> Array[UInt:D]
  ) is export {
    from-decimal %bases<to>, to-decimal(%bases<from>, @digits);
  }

  sub to-decimal ($input-base, @input-digits) {
    my $elems = @input-digits.elems;
    $_ == 0 ?? $elems-- !! last for @input-digits;
    (loop (my $i = 0; $i < $elems; $i++) {
      @input-digits.reverse[$i] * $input-base ** $i;
    }).sum;
  }

  sub from-decimal ($output-base, $num is copy) {
    my UInt:D @output-digits;
    while $num >= $output-base {
      unshift @output-digits, $num % $output-base;
      $num div= $output-base;
    }
    @output-digits.unshift: $num;
  }

stub: |-
  enum Error «
    'input base must be >= 2'
    'output base must be >= 2'
    'all digits must satisfy 0 <= d < input base'
  »;

  sub convert-base ( :%bases!, :@digits! ) is export {
  }
