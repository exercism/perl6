plan: 11
tests: |-
  for @test-cases -> %case {
    given %case<property> {
      when 'square' {
        if %case<expected><error>:exists {
          throws-like
            { grains-on-square %case<input><square> },
            Exception,
            message => /
              $( %case<expected><error> )
              || 'Constraint type check failed in binding to parameter'
            /,
            %case<description>;
        }
        else {
          is grains-on-square(%case<input><square>),
            |%case<expected description>;
        }
      }

      when 'total' {
        is total-grains, |%case<expected description>;
      }
    }
  }

unit: module
example: |-
  sub grains-on-square ( $number where * âˆˆ 1 .. 64 ) is export {
    2 ** ($number - 1);
  }

  sub total-grains is export {
    [+] map 1..64: &grains-on-square;
  }

stub: |-
  sub grains-on-square ($number) is export {
  }

  sub total-grains is export {
  }

