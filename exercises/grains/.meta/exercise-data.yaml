plan: 2
tests: |-
  for $c-data<cases>.values {
    if .<cases> {
      subtest .<description> => {
        plan 10;
        for .<cases>.values -> %case {
          given %case<expected> {
            when .<error>.so {
              throws-like
                { grains-on-square %case<input><square> },
                Exception,
                message => /
                  $( %case<expected><error> )
                  || 'Constraint type check failed in binding to parameter'
                /,
                %case<description>;
            }

            default {
              is grains-on-square(%case<input><square>),
                |%case<expected description>;
            }
          }
        }
      }
    }

    elsif .<property> eq 'total' {
      is total-grains, |.<expected description>;
    }
  }

unit: module
example: |-
  sub grains-on-square ( $number where * âˆˆ 1 .. 64 ) is export {
    2 ** ($number - 1);
  }

  sub total-grains is export {
    [+] map 1..64: &grains-on-square;
  }

stub: |-
  sub grains-on-square ($number) is export {
  }

  sub total-grains is export {
  }

