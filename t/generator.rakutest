use Test;
use lib ( my $base-dir = $?FILE.IO.resolve.parent(2) ).add('lib');
use Exercism::Generator;

subtest 'Rendered test files' => {
  plan 3;

  given new-generator() {
    is .test, q:to/TEST/, 'No data';
      #!/usr/bin/env raku
      use Test;
      use lib $?FILE.IO.dirname;
      use TestExercise;

      done-testing;
      TEST
 }

  given new-generator( :data(:plan(1)) ) {
    is .test, q:to/TEST/, 'A plan';
      #!/usr/bin/env raku
      use Test;
      use lib $?FILE.IO.dirname;
      use TestExercise;
      plan 1;
      TEST
 }

  given new-generator( :data(:tests('ok True;')) ) {
    is .test, q:to/TEST/, 'A test';
      #!/usr/bin/env raku
      use Test;
      use lib $?FILE.IO.dirname;
      use TestExercise;

      ok True;

      done-testing;
      TEST
  }
}

subtest '0 case UUIDs' => {
  plan 4;

  given new-generator(
    :exercise<hello-world>,
    :case-uuids(),
  ) {
    is .package, 'HelloWorld', 'Default package name is UpperCamelCase';
    ok .case-uuids ~~ âˆ…, 'Case UUIDs is empty set';
    ok .cases      ~~ [], 'No cases';
    is .json-tests, '', 'Empty JSON';
  }
}

subtest '1 case UUID' => {
  plan 4;

  given new-generator(
    :exercise<hello-world>,
    :case-uuids(<af9ffe10-dc13-42d8-a742-e7bdafac449d>),
    :data(:package<TEST>),
  ) {
    is .package, 'TEST', 'Custom package name as specified';

    ok .case-uuids ~~ <af9ffe10-dc13-42d8-a742-e7bdafac449d>;

    if $base-dir.add('.problem-specifications') ~~ :d {
      is-deeply .cases.Array, [%(
        :description('Say Hi!'),
        :property<hello>,
        :input(Hash.new),
        :expected('Hello, World!'),
      ).item], 'Case taken from UUID';

      is .json-tests, q:to/JSON/.trim, 'Cases converted to JSON array';
        [
          {
            "description": "Say Hi!",
            "expected": "Hello, World!",
            "input": {
            },
            "property": "hello"
          }
        ]
        JSON
    }
    else {
      skip 'problem-specifications required', 2;
    }
  }
}

done-testing;

sub new-generator (|c) {
  Exercism::Generator.new( :exercise<test-exercise>, |c )
}
